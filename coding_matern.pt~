#!/usr/bin/python

import numpy as np
import matplotlib.pyplot as plt
import sys
from videosink import VideoSink, grayscale
import poissonneuron as pn
import gaussianenv as ge

zeta = 2
L = 0.8
N = 1
a = np.zeros(N*N)
sigma = 0.001
gamma = 1.0
eta = 2.162
order = 1
alpha = 0.2
phi = 1.3
dtheta = 0.3
dt = 0.001
repetitions = 100

e = ge.GaussianEnv(zeta,gamma,eta,L,N,-2.0,-2.0,4.0,4.0,sigma,order)
#e2 =  GaussianEnv(zeta,gamma*0.9,eta*1.1,L,N,-2.0,-2.0,4.0,4.0,sigma,order)

gam = e.getgamma()
et = e.geteta()

abar  = np.sqrt(2.0*np.pi)*alpha*phi/dtheta

print 'abar is',abar,'firing probability per dt is',abar*dt

code = pn.PoissonCode(np.arange(-4.0,4.0,dtheta),alpha,phi)

timewindow = 10000
spacesteps = 400

space = np.arange(-4.0,4.0,8.0/spacesteps)

weight = 1.0/repetitions

sigmaavg = np.zeros((timewindow,order,order))
for k in range(repetitions):
	mu = np.zeros((timewindow,order))
	stim = np.zeros((timewindow,order))
	sigma = np.zeros((timewindow,order,order))
	sigma[-1,:,:] = 0.001*np.eye(order)
	sigmamf = np.zeros((timewindow,order,order))
	sigmamf[-1,:,:] = 0.001*np.eye(order)
	sigmanew = np.zeros((order,order))
	P = np.zeros((spacesteps,timewindow))
	spcount = 0
	for i in range(timewindow):
		s = e.samplestep(dt).ravel()
		stim[i,:] = s
		spi = code.spikes(s[0],dt)
		if sum(spi)>=1:
			spcount +=1
			lam = np.linalg.inv(sigma[i-1,:,:])
			while sum(spi)!=1:
				spi = code.spikes(s[0],dt)
			ids = np.where(spi==1)
			thet = np.zeros_like(mu[i,:])
			thet[0] = code.neurons[ids[0]].theta[0]
			for ii in range(order):
				for jj in range(order):
					sigma[i,ii,jj] = sigma[i-1,ii,jj]-sigma[i-1,0,jj]*sigma[i-1,0,ii]/(alpha**2+sigma[i-1,0,0])
			mu[i,:] = np.dot(sigma[i,:,:],np.dot(lam,mu[i-1,:])+thet/alpha**2)	
		else:
			mu[i,:] = mu[i-1,:] - dt*np.dot(gam,mu[i-1,:])
			sigma[i,:,:] = sigma[i-1,:,:] - dt*(np.dot(gam,sigma[i-1,:,:])+np.dot(sigma[i-1,:,:],gam.T)-et)
#		for j in range(spacesteps):
#			P[j,i] = np.exp(-(space[j]-mu[i,0])**2/(2.0*sigma[i,0,0]))/(np.sqrt(2.0*np.pi*sigma[i,0,0]))
	
	sigmaavg = sigmaavg + sigma*weight
	print "Run", k, "Firing rate was ", np.float(spcount)/(timewindow*dt), "abar is ", abar

for i in range(timewindow):
	sigmanew = sigmamf[i-1,:,:] + dt*(et - np.dot(gam,sigmamf[i-1,:,:]) - np.dot(sigmamf[i-1,:,:],gam.T))
	for ii in range(order):
		for jj in range(order):
			sigmamf[i,ii,jj] = sigmanew[ii,jj] - dt*abar*sigmamf[i-1,0,ii]*sigmamf[i-1,0,jj]/(alpha**2+sigmamf[i-1,0,0])	

fig = plt.figure()
ax = fig.add_subplot(2,1,1)
ax2 = fig.add_subplot(2,1,2)
ts = np.arange(0.0,dt*timewindow,dt)
ax.plot(ts,mu[:,0],'b:',ts,stim[:,0],'r')
#ax.imshow(P,extent=[0,ts[-1],4.0,-4.0],aspect='auto',cmap='gist_yarg')
ax2.plot(ts,sigma[:,0,0],'r:',ts,sigmamf[:,0,0],'b',ts,sigmaavg[:,0,0],'k')
#
#for i in range(repetitions):
#	print i
#	mu = np.zeros((order+1,))
#	sigma = 0.001*np.eye(order+1)
#	sigmanew = np.zeros_like(sigma)
#	for j in range(int(time/dt)):
#		s = e.samplestep(dt)
#		spi = code.spikes(s,dt)
#		if sum(spi)>=1:
#			lam = np.linalg.inv(sigma)
#			while sum(spi) != 1:
#				print "Too much spikes!!!", overspike
#				overspike+=1
#				spi = code.spikes(s,dt)
#			ids = np.where(spi==1)
#			thet = np.zeros_like(mu)
#			thet[0] = code.thetas[ids]
#			for ii in range(order+1):
#				for jj in range(order+1):
#					sigmanew[ii,jj] = sigma[ii,jj] - sigma[0,ii]*sigma[0,jj]/(alpha**2+sigma[0,0]) 
#			mu = np.dot(sigmanew,np.dot(lam,mu)+thet/alpha**2)
#			sigma = sigmanew
#		else:
#			mu = mu -dt*np.dot(gam,mu)
#			sigma = sigma -dt*(np.dot(gam,sigma)+np.dot(sigma,gam.T)-et)
#		covars[i,j] = sigma[0,0]
#
#cov = np.average(covars,axis=0)
#
#fig = plt.figure()
#ax= fig.add_subplot(1,1,1)
#ax.plot(cov)
#plt.show()
